# -*- mode: ruby -*-
# vim: set ft=ruby ts=2 et :

# Vagrant File tested in:
#
# CentOS Linux release 7.2.1511
#
# $ vagrant --version
# Vagrant 1.8.1
#
# $ vagrant plugin list
# vagrant-libvirt (0.0.35)
# vagrant-registration (1.3.0)
# vagrant-share (1.1.5, system)
# vagrant-dns (1.0.0)

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Require a recent version of vagrant otherwise some have reported errors 
# setting host names on boxes
Vagrant.require_version ">= 1.7.2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  vagrant_cluster_config = {
    "box_name"  => ENV['BOX_NAME'] || "centos/7",
    "subscription_register"  => ENV['SUB_REG'],
    "subscription_user"  => ENV['SUB_USER'],
    "subscription_pass"  => ENV['SUB_PASS'],
    "num_nodes" => ENV['NUM_HOSTS'] || 2,
    "mn_memory"  => ENV['MN_MEMORY'] || 512,
    "master_memory"  => ENV['MASTER_MEMORY'] || 512,
    "node_memory"  => ENV['NODE_MEMORY'] || 512
  }

  config.vm.box = vagrant_cluster_config["box_name"]

  # NOTE: vagrant-registration (1.3.0) is not working for me
  
  if Vagrant.has_plugin?('vagrant-registration')
     # enable or disable registration step.
     config.registration.skip = vagrant_cluster_config["subscription_register"]
     config.registration.skip = true
  #  config.registration.username = vagrant_cluster_config["subscription_user"] 
  #  config.registration.password = vagrant_cluster_config["subscription_pass"] 
     # disables automatic unregistration on halt (on shut down).
     # So the box will unregister only on destroy.
     config.registration.unregister_on_halt = false
     # disable auto-attach this will be provisioner task.
     config.registration.auto_attach = false
  end

  # Disabling the default /vagrant share
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # 1: Master Node
  # 2, 3: Nodes
  
  N = (vagrant_cluster_config['num_nodes']).to_i

  (1..N).each do |i|
    if i == 1
      # openshift master nodes
      vm_name = "oscppoc-mn"
      vm_memory = vagrant_cluster_config['mn_memory']
    elsif i == 2
      # openshift master nodes
      vm_name = "oscppoc-master"
      vm_memory = vagrant_cluster_config['master_memory']
    else
      # openshift workers nodes
      vm_name = "oscppoc-node#{i-2}"
      vm_memory = vagrant_cluster_config['node_memory']
    end

    config.vm.define "#{vm_name}" do |node|
      node.vm.hostname = "#{vm_name}"
      #node.vm.network :private_network, ip: "10.10.10.10#{i}", auto_config: false 
      node.vm.provider :libvirt do |domain|
        domain.uri = 'qemu+unix:///system'
        domain.driver = 'kvm'
        domain.memory = "#{vm_memory}".to_i
        domain.cpus = 1
        # additional disk for Docker backend storage
        domain.storage :file, :size => '10G'
      end
      # The Ansible provisioner is executed on every node
      # The inventory file is re-created on each run.
      # FIXME: workers hosts must be a pattern. This
      # only works in Vagrant +1.8.0
      node.vm.provision :ansible do |ansible|
        ansible.groups = {
          "mn-group" => ["oscppoc-mn"],
          "master-group" => ["oscppoc-master"],
          "worker-group" => ["oscppoc-master", "oscppoc-node1", "oscppoc-node2"],
          "all_groups:children" => ["mn-group",
                                    "master-group", 
                                    "worker-group"]
        }
        ansible.playbook = "provisioning/site.yml"
      end
    end
  end 
end
